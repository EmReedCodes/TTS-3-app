@import "./_octolib.scss";

$bg: #206a5d;
$bg-light: lighten($bg, 7%);
$bg-dark: darken($bg, 7%);
$contrast: #862f82;
$contrast-light: lighten($contrast, 7%);
$contrast-dark: darken($contrast, 7%);


* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  // min-height: 100%;
  height: 100vh;
  padding: 0;
  background-color: $bg;
  font-family: "Lexend", sans-serif;
  color: #ffcc29;
}

.holdBoth {
 display: flex;
  height: 100%;
  width: 90%;
}


.row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  width: 100%;
  width: 90%;
  margin: 0 auto;
  align-items: center;

 
  @include respond-to("small") {

    flex-direction: column;
    justify-content: center;
    // gap here spaced items on main axis for me
    gap: 1rem;
    display:block;

  }
}

.doubleColumn {
  gap: 2rem;
  justify-content: center;
  display: flex;
  flex-direction: column;
  // justify-content: flex-end;
  align-items: center;
  flex: 1.5;
  //below is what I want to do without hardcoding it
  // and now hardcoding isnt working lol

}

.column {
  padding-top: 1rem;
  display: flex;
  flex-direction: column;
  // flex-basis: 100%;
  flex: 1;
  gap: 1rem;
}


.word {
  font-size: 5rem;
}

h2 {
  
  padding-bottom: 1rem;
  font-size: 2rem;
  @include respond-to("small") {

    text-align: center;

  }
 
}

ul {
  list-style: none;
  padding: 0;
  width: 100%;
}

.confirmBtn,
.text-input {
  align-self: center;
  background: transparent;
  padding: 0.5rem 0.5rem;
  /* margin: 0 0.5rem; */
  transition: all 0.5s ease;
  color: #81b214;
  font-size: 1rem;
  letter-spacing: 1px;
  outline: none;
  box-shadow: 20px 38px 34px -26px;
  background-color: hsla(0, 0%, 0%, 0.2);
  border-top-left-radius: 255px 15px;
  border-top-right-radius: 15px 225px;
  border-bottom-right-radius: 225px 15px;
  border-bottom-left-radius: 15px 255px;
  border: solid 7px #f58634;
  
  @include respond-to("small-medium"){
    width: 90%;
  }


}

.text-input{
  flex: 1
}


.wordInput {
  display: flex;
  gap: 5px;
  .confirmBtn{
    border: solid 7px #f58634;
  }
    @include respond-to("small-medium"){
      
       flex-direction: column;
    }
  
}


button:hover {
  box-shadow: 2px 8px 4px -6px hsla(0, 0%, 0%, 0.3);
  background-color: hsla(0, 0%, 0%, 0.3);
  background-color: hsla(0, 0%, 0%, 0.3);
}

span {
  color: #81b214;
  cursor: pointer;
}

a {
  text-decoration: none;
  color: #81b214;
}

.slider[type="range"] {
  -webkit-appearance: none;
  $track-thickness: 0.75rem;
  padding: 0.5rem 0;
  background: $bg;
  display: block;

  $track-bg: $bg-light;
  $thumb-bg: $bg-light;

  &.contrast{
    &::-webkit-slider-runnable-track {
      background: $contrast-light !important;
    }
    &::-webkit-slider-thumb {
      background: $contrast-light !important;
    }
  }

  &::-webkit-slider-runnable-track {
    cursor: pointer;
    height: $track-thickness;
    width: 100%;
    background: $track-bg;
    @include animate;
    border-radius: 999px;
  }


  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    $size: 1.5rem;
    height: $size;
    width: $size;
    margin-top: calc((-#{$size} / 2) + (#{$track-thickness} / 2));
    border-radius: 50%;
    background: $thumb-bg;
    cursor: pointer;

    box-shadow: $shadow-border;

    @include animate;
  }

  &:hover {
    &::-webkit-slider-runnable-track {
      box-shadow: $shadow-1;
    }
    &::-webkit-slider-thumb {
      $size: 1.75rem;
      height: $size;
      width: $size;
      margin-top: calc((-#{$size} / 2) + (#{$track-thickness} / 2));
      // background: $bg-dark;
      box-shadow: $shadow-3;
    }
  }
}
.range-output {
  display: flex;
  .speed {
    color: $contrast-light
  }
}
// my attempt to add ticks
//easier to just display the outputted values seperately lol
// .range {
//   --ticksThickness: 2px;
//   --ticksHeight: 30%;
//   --ticksColor: silver;
  
//   display: inline-block;
//   background: silver;
//   background: linear-gradient(to right, var(--ticksColor) var(--ticksThickness), transparent 1px) repeat-x;
//   background-size: calc(100%/((var(--max) - var(--mid) - var(--min)) / var(--step)) - .1%) var(--ticksHeight);
//   background-position: 0 bottom;
//   position: relative;
//   &::before, &::after {
//     font: 12px monospace;
//     // content is used with before & after to insert content
//     content: counter(x);
//     position: absolute;
//     bottom: -2ch;
//   }
//   // &::before {
//   //   counter-reset: x var(--min);
//   //   transform: translateX(-50%);
//   // }
//   &::after {
//     counter-reset: x var(--mid);
//     transform: translate(-50%, -50%);
//   }
//   &::after{
//     counter-reset: x var(--max);
//     right: 0;
//     transform: translateX(50%);
//   }
// }

// .range > input {
//   // width: 100%;
//   margin: 0 -6px; /* Critical adjustment */
// }

.confirmBtn {
  background-color: hsla(0, 0%, 0%, 0.3);
}



.bankList {
  margin: 1rem;
  display: flex;
  align-items: center;

  .buttons {
    display: flex;
    flex-direction: column;

    .save {
      display: none;
    }
  }

  .content {
    margin: 0.5rem;
    @include animate;
    flex-grow: 1;
  }

  &.editing {
    .save {
      display: initial;
    }
    .edit {
      display: none;
    }

    .content {
      background: $bg-dark;
      padding: 0.5rem;
      box-shadow: $inset-shadow-1;
    }
  }
}


.buttonGrp { 
  // width: 100%;
  display: flex;
  align-items: center;

  > *:not(:last-child) {
    margin-right: 0.5rem;
  }
}

// toast


